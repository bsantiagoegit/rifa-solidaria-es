---
import Layout from '@/layouts/Layout.astro';
import boletoImage from '@/assets/boleto-rifa.webp';

const startNumber = 1;
const endNumber = 100;
const numbers = Array.from({ length: endNumber - startNumber + 1 }, (_, i) => startNumber + i);
---

<Layout>
	<div class='grid grid-cols-1 gap-2 md:gap-4 max-w-4xl mx-auto px-4 py-8 overflow-x-hidden'>
		<h1 class='text-3xl md:text-4xl lg:text-5xl font-bold text-center m-0'>Rifa solidaria</h1>
		<section class='grid grid-cols-1 sm:grid-cols-2 gap-2 items-center m-0'>
			<article class='col-span-1 flex flex-col gap-2'>
				<p class='text-md md:text-xl text-left'>Rifa solidaria a favor de Norman Patricio Espinosa Guarnizo</p>
				<p class='text-md md:text-xl text-left'>La rifa se realizara el día 26 de Julio de 2025</p>
				<p class='text-md md:text-xl text-left'>El valor de la rifa es de &euro;5</p>
				<p class='text-md md:text-xl text-left'>Los premios a sortear son:</p>
				<div class='pl-10'>
					<ul class='list-disc'>
						<li class='text-sm md:text-md'>1er Premio: &euro;300</li>
						<li class='text-sm md:text-md'>2do Premio: Un costillar asado</li>
						<li class='text-sm md:text-md'>3er Premio: Un jamon</li>
					</ul>
				</div>
			</article>
			<article class='col-span-1'>
				<img class='' src={boletoImage.src} alt='Boleto de la rifa' />
			</article>
		</section>
		<section>
			<h2 class='text-xl md:text-2xl lg:text-3xl font-bold text-center md:text-left m-0'>Para realizar el pago, contacte al numero 605551466</h2>
		</section>
		<section>
			<h2 class='text-xl md:text-2xl lg:text-3xl font-bold text-center m-0'>Por favor selecciona tu número favorito</h2>
		</section>
		<section class='grid grid-cols-2 sm:grid-cols-4 md:grid-cols-8 lg:grid-cols-12 gap-4 m-0'>
			{
				numbers.map((number) => (
					<button
						class='rounded-lg border-2 border-indigo-300 cursor-pointer py-4 hover:bg-indigo-300 hover:text-white disabled:bg-gray-200 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors duration-200 col-span-1'
						data-number={number}
					>
						{number}
					</button>
				))
			}
		</section>

		<!-- Modal -->
		<div id='reservationModal' class='fixed inset-0 z-50 overflow-auto hidden'>
			<!-- Contenido del modal -->
			<div
				class='relative z-10 border-2 border-indigo-300 bg-white rounded-lg max-w-md w-11/12 md:w-full mx-auto my-16 p-6'
				onclick='event.stopPropagation()'
			>
				<span class='absolute top-4 right-4 text-gray-500 text-2xl font-bold cursor-pointer hover:text-black close-modal'>&times;</span>
				<h2 class='text-xl font-bold mb-4'>Reservar número <span id='selectedNumber' class='text-indigo-600'></span></h2>

				<form id='reservationForm' class='space-y-4'>
					<div class='space-y-2'>
						<label for='name' class='block text-sm font-medium text-gray-700'>Nombre completo</label>
						<input
							type='text'
							id='name'
							required
							class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500'
						/>
					</div>

					<div class='space-y-2'>
						<label for='phone' class='block text-sm font-medium text-gray-700'>Teléfono</label>
						<input
							type='tel'
							id='phone'
							required
							class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500'
						/>
					</div>

					<div id='message' class='hidden py-2 px-3 rounded text-sm'></div>

					<div class='flex justify-center items-center space-x-3 pt-4'>
						<button
							type='button'
							class='close-modal px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 w-full cursor-pointer'
						>
							Cancelar
						</button>
						<button
							type='submit'
							class='px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 w-full cursor-pointer'
						>
							Reservar
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</Layout>

<script is:inline>
	// Variables globales
	let selectedNumber = null;
	const modal = document.getElementById('reservationModal');
	const selectedNumberSpan = document.getElementById('selectedNumber');
	const reservationForm = document.getElementById('reservationForm');
	const messageDiv = document.getElementById('message');

	// Cargar números reservados al iniciar
	document.addEventListener('DOMContentLoaded', async () => {
		try {
			const response = await fetch('/api/tomados');
			const data = await response.json();
			updateButtonStates(data);
		} catch (error) {
			console.error('Error al cargar números reservados:', error);
			showMessage('Error al cargar los números reservados', 'error');
		}
	});

	// Mostrar mensajes al usuario
	function showMessage(message, type) {
		messageDiv.textContent = message;
		messageDiv.className = `py-2 px-3 rounded text-sm ${
			type === 'error' ? 'bg-red-100 text-red-700' : type === 'success' ? 'bg-green-100 text-green-700' : 'bg-blue-100 text-blue-700'
		}`;
		messageDiv.classList.remove('hidden');

		setTimeout(() => {
			messageDiv.classList.add('hidden');
		}, 5000);
	}

	// Actualizar el estado de los botones según los números reservados
	function updateButtonStates(takenNumbers) {
		Object.keys(takenNumbers).forEach((number) => {
			const button = document.querySelector(`button[data-number="${number}"]`);
			if (button) {
				button.disabled = true;
				button.classList.add('line-through');
			}
		});
	}

	// Inicialización de eventos
	function initModal() {
		// Mostrar modal al hacer clic en un número
		document.querySelectorAll('button[data-number]').forEach((button) => {
			button.addEventListener('click', handleNumberClick);
		});

		// Cerrar modal con la X o el botón Cancelar
		document.querySelectorAll('.close-modal').forEach((btn) => {
			btn.addEventListener('click', closeModal);
		});

		// Cerrar al hacer clic fuera del contenido
		modal.addEventListener('click', closeModal);

		// Cerrar con Escape
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
				closeModal();
			}
		});
	}

	// Manejar clic en un botón de número
	function handleNumberClick(event) {
		event.stopPropagation();
		const button = event.currentTarget;
		if (button.disabled) return;

		selectedNumber = button.dataset.number;
		selectedNumberSpan.textContent = selectedNumber;
		modal.classList.remove('hidden');
		document.body.style.overflow = 'hidden'; // Prevenir scroll del body
	}

	// Cerrar modal
	function closeModal() {
		modal.classList.add('hidden');
		document.body.style.overflow = ''; // Restaurar scroll del body
	}

	// Inicializar cuando el DOM esté listo
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initModal);
	} else {
		initModal();
	}

	// Manejar envío del formulario
	reservationForm.addEventListener('submit', async (e) => {
		e.preventDefault();

		const name = document.getElementById('name').value.trim();
		const phone = document.getElementById('phone').value.trim();

		// Validar que se haya seleccionado un número
		if (!selectedNumber) {
			showMessage('Por favor selecciona un número primero', 'error');
			return;
		}

		try {
			// Convertir el número a entero explícitamente
			const number = parseInt(selectedNumber, 10);

			// Mostrar indicador de carga
			showMessage('Procesando reserva...', 'info');

			const response = await fetch('/api/reservar', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					number,
					name,
					phone,
				}),
			});

			const result = await response.json();

			if (response.ok) {
				showMessage('¡Número reservado exitosamente!', 'success');
				// Deshabilitar el botón del número reservado
				const button = document.querySelector(`button[data-number="${selectedNumber}"]`);
				if (button) {
					button.disabled = true;
					button.classList.add('bg-gray-300', 'cursor-not-allowed', 'line-through');
				}
				// Cerrar el modal
				modal.classList.add('hidden');
				// Limpiar el formulario
				reservationForm.reset();
			} else {
				showMessage(result.error || 'Error al procesar la reserva', 'error');
			}
		} catch (error) {
			console.error('Error:', error);
			showMessage('Error de conexión. Por favor, intenta de nuevo.', 'error');
		}
	});
</script>
